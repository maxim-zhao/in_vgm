__declspec( dllexport ) intptr_t winampGetExtendedRead_open(const char *fn, int *size, int *bps, int *nch, int *srate)

Open the file and prepare to decode.
parametes:
const char *fn - the file to decode
int *size - set *size to the total number of bytes that this file will decode to. You can set this to -1 if you don't know, but some things won't work. (like percentage estimates in the transcoder)
int *bps - set this to the number of bits per sample in the output
int *nch - set this to the number of channels in the output
int *srate - set this to the sample rate (i.e, 44100)

Note: try and use the values already in bps, nch and srate.

return value: a handle which will be passed back you in calls to getData and close. Return 0 on any error (such as the file not existing).



__declspec( dllexport ) intptr_t winampGetExtendedRead_getData(intptr_t handle, char *dest, int len, int *killswitch)

Decode some of the file. This will be called multiple times until either the whole file is decoded or the decoding is cancelled.
parameters:
intptr_t handle: the handle you returned on winampGetExtendedRead_open
char *dest: a buffer to write the decoded file to
int len: the size of the buffer dest
int *killswitch: check this periodically. If it is not zero, return as soon as possible, the decoding has been cancelled.

return value: the number of bytes in dest. If this is zero, then winamp will assume that whole file is decoded.



__declspec( dllexport ) int winampGetExtendedRead_setTime(intptr_t handle, int millisecs)

Seek in the file.
parameters:
intptr_t handle: the handle you returned from the call to winampGetExtendedRead_open
int millisecs: the number of milliseconds into the file (measured starting from the beginning of the file) that you should seek to.
return value: nonzero on success, zero on failure.

note: this is optional, and isn't used by anything in the wild at the moment. But it will be soon.
Your seeking doesn't have to be totally accurate.



__declspec( dllexport ) void winampGetExtendedRead_close(intptr_t handle)

close the file and free all resources associated with it.
parameters:
intptr_t handle: the handle you returned from the call to winampGetExtendedRead_open
no return value.